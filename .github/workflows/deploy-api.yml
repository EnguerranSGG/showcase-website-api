name: Deploy API

on:
  push:
    branches: [main]

jobs:
  # ===========================================
  # BUILD API
  # ===========================================
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting (skip strict checks)
        run: npm run lint -- --max-warnings 1000 || true

      - name: Build API
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: dist/

  # ===========================================
  # D√âPLOIEMENT PRODUCTION (main)
  # ===========================================
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy API to production
        run: |
          echo "üöÄ === D√âBUT DU D√âPLOIEMENT API ==="

          # √âtape 1 : Cr√©er le r√©pertoire de d√©ploiement
          echo "üìÅ √âtape 1 : Cr√©ation du r√©pertoire de d√©ploiement"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p /opt/air"
          echo "‚úÖ R√©pertoire cr√©√©"

          # √âtape 2 : Diagnostic initial
          echo "üîç √âtape 2 : Diagnostic initial du r√©pertoire"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "ls -la /opt/air/"
          echo "‚úÖ Diagnostic initial termin√©"

          # √âtape 3 : Copier les fichiers API
          echo "üìã √âtape 3 : Copie des fichiers API"
          echo "=== D√©but de la copie des fichiers ==="
          scp -o StrictHostKeyChecking=no -r . ${{ secrets.USER }}@${{ secrets.HOST }}:/opt/air/
          echo "=== Fin de la copie des fichiers ==="
          echo "‚úÖ Fichiers copi√©s"

          # √âtape 4 : V√©rifier la copie
          echo "üîç √âtape 4 : V√©rification de la copie"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "ls -la /opt/air/"
          echo "‚úÖ V√©rification termin√©e"

          # √âtape 5 : Cr√©er le fichier .env.prod
          echo "‚öôÔ∏è √âtape 5 : Cr√©ation du fichier .env.prod"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
            echo 'DATABASE_URL=postgresql://postgres:air-admin-password@db:5432/air_db' > /opt/air/.env.prod
            echo 'JWT_ACCESS_SECRET=\"${{ secrets.JWT_ACCESS_SECRET }}\"' >> /opt/air/.env.prod
            echo 'JWT_REFRESH_SECRET=\"${{ secrets.JWT_REFRESH_SECRET }}\"' >> /opt/air/.env.prod
            echo 'NODE_ENV=production' >> /opt/air/.env.prod
            echo 'LOG_LEVEL=info' >> /opt/air/.env.prod
            echo 'ADMIN_EMAIL=\"${{ secrets.ADMIN_EMAIL }}\"' >> /opt/air/.env.prod
            echo 'ADMIN_PASSWORD=\"${{ secrets.ADMIN_PASSWORD }}\"' >> /opt/air/.env.prod
            echo 'FRONTEND_ORIGIN=https://accueil-insertion-rencontre.fr,https://www.accueil-insertion-rencontre.fr' >> /opt/air/.env.prod
            echo 'SMTP_HOST=smtp.gmail.com' >> /opt/air/.env.prod
            echo 'SMTP_PORT=587' >> /opt/air/.env.prod
            echo 'SMTP_USER=\"${{ secrets.SMTP_USER }}\"' >> /opt/air/.env.prod
            echo 'SMTP_PASS=\"${{ secrets.SMTP_PASS }}\"' >> /opt/air/.env.prod
            echo 'SMTP_FROM=\"${{ secrets.SMTP_FROM }}\"' >> /opt/air/.env.prod
            echo 'FRONTEND_URL=https://accueil-insertion-rencontre.fr' >> /opt/air/.env.prod
            echo 'PUBLIC_API_URL=https://accueil-insertion-rencontre.fr/api' >> /opt/air/.env.prod
            echo 'PUBLIC_ASSET_URL=https://accueil-insertion-rencontre.fr' >> /opt/air/.env.prod
            echo 'API_URL=https://accueil-insertion-rencontre.fr/api' >> /opt/air/.env.prod
          "
          echo "‚úÖ Fichier .env.prod cr√©√©"

          # √âtape 6 : V√©rifier le fichier .env.prod
          echo "üîç √âtape 6 : V√©rification du fichier .env.prod"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "echo '=== Contenu du fichier .env.prod ===' && cat /opt/air/.env.prod"
          echo "‚úÖ V√©rification .env.prod termin√©e"

          # √âtape 7 : Arr√™ter les conteneurs existants
          echo "üõë √âtape 7 : Arr√™t des conteneurs existants"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "cd /opt/air && docker compose -f docker-compose.prod.yml down"
          echo "‚úÖ Conteneurs arr√™t√©s"

          # √âtape 8 : Builder les images avec les variables d'environnement
          echo "üî® √âtape 8 : Build des images Docker"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
            cd /opt/air &&
            export ADMIN_EMAIL='${{ secrets.ADMIN_EMAIL }}' &&
            export ADMIN_PASSWORD='${{ secrets.ADMIN_PASSWORD }}' &&
            export JWT_ACCESS_SECRET='${{ secrets.JWT_ACCESS_SECRET }}' &&
            export JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' &&
            docker compose -f docker-compose.prod.yml build --no-cache api db
          "
          echo "‚úÖ Images Docker build√©es"

          # √âtape 9 : D√©marrer les conteneurs avec diagnostic imm√©diat
          echo "üöÄ √âtape 9 : D√©marrage des conteneurs avec diagnostic"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
            cd /opt/air &&
            echo '=== D√©marrage des conteneurs ===' &&
            docker compose -f docker-compose.prod.yml up -d api db &&
            sleep 5 &&
            echo '=== √âtat des conteneurs ===' &&
            docker compose -f docker-compose.prod.yml ps &&
            echo '=== Logs du conteneur API (derni√®res 50 lignes) ===' &&
            docker compose -f docker-compose.prod.yml logs --tail=50 api &&
            echo '=== Logs du conteneur DB (derni√®res 20 lignes) ===' &&
            docker compose -f docker-compose.prod.yml logs --tail=20 db &&
            echo '=== Contenu du fichier .env.prod ===' &&
            cat .env.prod &&
            echo '=== Test de connexion √† la base de donn√©es ===' &&
            docker compose -f docker-compose.prod.yml exec -T db pg_isready -U postgres
          "
          echo "‚úÖ Diagnostic des conteneurs termin√©"

          # √âtape 10 : Attendre et appliquer les migrations
          echo "üóÑÔ∏è √âtape 10 : Application des migrations"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "cd /opt/air && sleep 30 && docker compose -f docker-compose.prod.yml exec -T api npx prisma migrate deploy"
          echo "‚úÖ Migrations appliqu√©es"

          # √âtape 11 : V√©rifier s'il y a des admins et seed si n√©cessaire
          echo "üë§ √âtape 11 : V√©rification des admins et seed conditionnel"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "cd /opt/air && docker compose -f docker-compose.prod.yml exec -T api npx prisma db execute --stdin <<< \"SELECT COUNT(*) FROM User WHERE role = 'ADMIN'\" | tail -1 | tr -d ' ' > /tmp/admin_count.txt"

          # √âtape 12 : Lire le r√©sultat et d√©cider du seed
          echo "üå± √âtape 12 : Ex√©cution conditionnelle du seed"
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
            cd /opt/air &&
            ADMIN_COUNT=\$(cat /tmp/admin_count.txt) &&
            if [ \"\$ADMIN_COUNT\" -eq 0 ]; then
              echo 'Aucun admin trouv√©, ex√©cution du seed...' &&
              docker compose -f docker-compose.prod.yml exec -T api npm run seed
            else
              echo \"\$ADMIN_COUNT admin(s) trouv√©(s), skip du seed\"
            fi &&
            rm -f /tmp/admin_count.txt
          "
          echo "‚úÖ Seed conditionnel termin√©"

          echo "üéâ === D√âPLOIEMENT API TERMIN√â AVEC SUCC√àS ==="

      - name: Health check API production
        run: |
          echo "üè• V√©rification de la sant√© de l'API"
          sleep 30
          curl -f https://accueil-insertion-rencontre.fr/api/health || exit 1
          echo "‚úÖ API en bonne sant√©"
