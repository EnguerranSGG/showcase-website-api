#!/bin/bash

# Script de configuration du VPS pour GitHub Actions
# Usage: ./setup-vps-for-github-actions.sh [user] [host]

set -e

USER=${1:-"root"}
HOST=${2:-"your-vps-ip"}

echo "üîß Configuration du VPS pour GitHub Actions"
echo "üë§ Utilisateur: $USER"
echo "üåê Host: $HOST"

# V√©rifier que le script est ex√©cut√© en tant que root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root"
    echo "Usage: sudo ./setup-vps-for-github-actions.sh [user] [host]"
    exit 1
fi

# Mettre √† jour le syst√®me
echo "üì¶ Mise √† jour du syst√®me..."
apt update && apt upgrade -y

# Installer Docker si pas d√©j√† install√©
if ! command -v docker &> /dev/null; then
    echo "üê≥ Installation de Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    systemctl enable docker
    systemctl start docker
else
    echo "‚úÖ Docker d√©j√† install√©"
fi

# Installer Docker Compose si pas d√©j√† install√©
if ! command -v docker-compose &> /dev/null; then
    echo "üê≥ Installation de Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
else
    echo "‚úÖ Docker Compose d√©j√† install√©"
fi

# Installer Certbot si pas d√©j√† install√©
if ! command -v certbot &> /dev/null; then
    echo "üîê Installation de Certbot..."
    apt install -y certbot python3-certbot-nginx
else
    echo "‚úÖ Certbot d√©j√† install√©"
fi

# Cr√©er l'utilisateur pour GitHub Actions si n√©cessaire
if ! id "github-actions" &>/dev/null; then
    echo "üë§ Cr√©ation de l'utilisateur github-actions..."
    useradd -m -s /bin/bash github-actions
    usermod -aG docker github-actions
    usermod -aG sudo github-actions
else
    echo "‚úÖ Utilisateur github-actions d√©j√† cr√©√©"
fi

# Cr√©er les r√©pertoires n√©cessaires
echo "üìÅ Cr√©ation des r√©pertoires..."
mkdir -p /opt/air
mkdir -p /opt/air-staging
mkdir -p /backups/air
mkdir -p /var/www/certbot

# Ajuster les permissions
chown -R github-actions:github-actions /opt/air
chown -R github-actions:github-actions /opt/air-staging
chown -R github-actions:github-actions /backups/air
chown -R www-data:www-data /var/www/certbot

# Configurer SSH pour GitHub Actions
echo "üîë Configuration SSH pour GitHub Actions..."
mkdir -p /home/github-actions/.ssh
chmod 700 /home/github-actions/.ssh

# Cr√©er une cl√© SSH pour GitHub Actions
if [ ! -f /home/github-actions/.ssh/id_rsa ]; then
    echo "üîë G√©n√©ration de la cl√© SSH..."
    sudo -u github-actions ssh-keygen -t rsa -b 4096 -f /home/github-actions/.ssh/id_rsa -N ""
    sudo -u github-actions ssh-keyscan -H $HOST >> /home/ggithub-actions/.ssh/known_hosts
fi

# Configurer sudo sans mot de passe pour github-actions
echo "üîê Configuration sudo sans mot de passe..."
cat > /etc/sudoers.d/github-actions << EOF
github-actions ALL=(ALL) NOPASSWD: /usr/bin/docker
github-actions ALL=(ALL) NOPASSWD: /usr/local/bin/docker-compose
github-actions ALL=(ALL) NOPASSWD: /usr/bin/certbot
github-actions ALL=(ALL) NOPASSWD: /bin/systemctl restart nginx
github-actions ALL=(ALL) NOPASSWD: /bin/systemctl stop nginx
github-actions ALL=(ALL) NOPASSWD: /bin/systemctl start nginx
EOF

# Configurer le firewall
echo "üî• Configuration du firewall..."
ufw allow 22/tcp   # SSH
ufw allow 80/tcp   # HTTP
ufw allow 443/tcp  # HTTPS
ufw --force enable

# Cr√©er le script de d√©ploiement
echo "üìù Cr√©ation du script de d√©ploiement..."
cat > /opt/air/deploy.sh << 'EOF'
#!/bin/bash
# Script de d√©ploiement pour GitHub Actions

set -e

PROJECT_DIR="/opt/air"
BACKUP_DIR="/backups/air"

echo "üöÄ D√©ploiement en cours..."

# Cr√©er un backup avant d√©ploiement
if [ -f "$PROJECT_DIR/scripts/backup-full.sh" ]; then
    echo "üíæ Cr√©ation du backup..."
    cd "$PROJECT_DIR"
    ./scripts/backup-full.sh "pre-deployment-$(date +%Y%m%d-%H%M%S)"
fi

# Arr√™ter les services
echo "‚èπÔ∏è Arr√™t des services..."
cd "$PROJECT_DIR"
docker compose -f docker-compose.prod.yml -f docker-compose.override.prod.yml down

# Construire et d√©marrer les services
echo "üî® Construction et d√©marrage des services..."
docker compose -f docker-compose.prod.yml -f docker-compose.override.prod.yml build --no-cache
docker compose -f docker-compose.prod.yml -f docker-compose.override.prod.yml up -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

# Appliquer les migrations
echo "üóÑÔ∏è Application des migrations..."
docker compose -f docker-compose.prod.yml -f docker-compose.override.prod.yml exec -T api npx prisma migrate deploy

# V√©rifier la sant√© des services
echo "üîç V√©rification de la sant√© des services..."
if curl -f -s "https://accueil-insertion-rencontre.fr/health" > /dev/null; then
    echo "‚úÖ D√©ploiement r√©ussi"
else
    echo "‚ùå √âchec du d√©ploiement"
    exit 1
fi

echo "üéâ D√©ploiement termin√© avec succ√®s"
EOF

chmod +x /opt/air/deploy.sh
chown github-actions:github-actions /opt/air/deploy.sh

# Afficher la cl√© publique SSH
echo ""
echo "üîë Cl√© publique SSH pour GitHub Actions:"
echo "=========================================="
cat /home/github-actions/.ssh/id_rsa.pub
echo "=========================================="
echo ""
echo "üìã Instructions:"
echo "1. Copiez la cl√© publique ci-dessus"
echo "2. Ajoutez-la dans GitHub > Settings > Secrets and variables > Actions"
echo "3. Cr√©ez les secrets suivants:"
echo "   - PRODUCTION_SSH_KEY: Contenu de /home/github-actions/.ssh/id_rsa"
echo "   - PRODUCTION_USER: github-actions"
echo "   - PRODUCTION_HOST: $HOST"
echo "   - STAGING_SSH_KEY: (m√™me cl√© priv√©e)"
echo "   - STAGING_USER: github-actions"
echo "   - STAGING_HOST: $HOST"
echo ""
echo "‚úÖ Configuration du VPS termin√©e !"
